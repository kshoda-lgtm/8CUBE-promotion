#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
NotebookLM用Markdown生成スクリプト
PowerPointファイルをGemini APIで分析してMarkdown形式で出力
"""

import json
import os
from pathlib import Path
from datetime import datetime
from powerpoint_processor_gemini import GeminiPowerPointProcessor


def generate_markdown_from_json(json_data: dict, output_path: str = None) -> str:
    """
    JSONデータからNotebookLM用のMarkdownを生成

    Args:
        json_data: PowerPoint処理結果のJSONデータ
        output_path: 出力先パス（省略時は標準出力）

    Returns:
        生成されたMarkdownテキスト
    """
    file_info = json_data.get('file_info', {})
    analysis = json_data.get('gemini_analysis', {})

    # ファイル名からクライアント名を抽出（タイトル用）
    file_name = file_info.get('file_name', 'Unknown')
    client_name = analysis.get('client_name', '')
    event_type = analysis.get('event_type', '')

    # タイトル生成
    if client_name:
        title = f"【{client_name}様】{event_type or 'プロモーション案件'}"
    else:
        title = file_name.replace('.pptx', '')

    # Markdown生成
    md_lines = []

    # ヘッダー
    md_lines.append(f"# {title}\n")
    md_lines.append(f"**元ファイル**: `{file_name}`  ")
    md_lines.append(f"**処理日時**: {file_info.get('processed_at', '')}  ")
    md_lines.append(f"**信頼度スコア**: {analysis.get('confidence_score', 0)}%\n")
    md_lines.append("---\n")

    # 基本情報
    md_lines.append("## 📋 基本情報\n")

    if client_name:
        md_lines.append(f"- **クライアント名**: {client_name}")

    if analysis.get('event_date'):
        md_lines.append(f"- **実施時期**: {analysis.get('event_date')}")

    if event_type:
        md_lines.append(f"- **イベント種別**: {event_type}")

    if analysis.get('venue'):
        md_lines.append(f"- **会場**: {analysis.get('venue')}")

    if analysis.get('target_count'):
        md_lines.append(f"- **ターゲット人数**: {analysis.get('target_count')}名")

    md_lines.append("")

    # イベント内容
    if analysis.get('event_description'):
        md_lines.append("## 📝 イベント内容\n")
        md_lines.append(f"{analysis.get('event_description')}\n")

    # 価格情報
    has_price_info = any([
        analysis.get('unit_price'),
        analysis.get('total_cost'),
        analysis.get('order_quantity')
    ])

    if has_price_info:
        md_lines.append("## 💰 価格情報\n")

        if analysis.get('unit_price'):
            md_lines.append(f"- **単価**: ¥{analysis.get('unit_price'):,}")

        if analysis.get('total_cost'):
            md_lines.append(f"- **総費用**: ¥{analysis.get('total_cost'):,}")

        if analysis.get('order_quantity'):
            md_lines.append(f"- **発注数量**: {analysis.get('order_quantity'):,}個")

        md_lines.append("")

    # 納期
    if analysis.get('deadline'):
        md_lines.append("## ⏰ 納期\n")
        md_lines.append(f"- **納期**: {analysis.get('deadline')}\n")

    # 協力会社
    partner_companies = analysis.get('partner_companies', [])
    if partner_companies:
        md_lines.append("## 🤝 協力会社\n")
        for company in partner_companies:
            if company:
                md_lines.append(f"- {company}")
        md_lines.append("")

    # ノベルティ/景品
    novelty_items = analysis.get('novelty_items', [])
    if novelty_items:
        md_lines.append("## 🎁 ノベルティ/景品\n")
        for item in novelty_items:
            if item:
                md_lines.append(f"- {item}")
        md_lines.append("")

    # キーワード
    keywords = analysis.get('keywords', [])
    if keywords:
        md_lines.append("## 🏷️ タグ・キーワード\n")
        tags = " ".join([f"`#{kw}`" for kw in keywords if kw])
        md_lines.append(f"{tags}\n")

    # スライドテキストサンプル
    slide_sample = json_data.get('slide_texts_sample', '')
    if slide_sample:
        md_lines.append("## 📄 スライド内容（抜粋）\n")
        md_lines.append("```")
        md_lines.append(slide_sample[:1000])  # 1000文字まで
        md_lines.append("```\n")

    # フッター
    md_lines.append("---")
    md_lines.append(f"\n*Generated by Gemini API v4.0 - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}*")

    # Markdown文字列を生成
    markdown_text = "\n".join(md_lines)

    # ファイル出力
    if output_path:
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(markdown_text)
        print(f"✅ Markdown生成完了: {output_path}")

    return markdown_text


def process_powerpoint_to_markdown(pptx_path: str, api_key: str = None):
    """
    PowerPointファイルを処理してMarkdownを生成

    Args:
        pptx_path: PowerPointファイルのパス
        api_key: Gemini APIキー
    """
    print(f"\n{'='*60}")
    print(f"PowerPoint → Markdown 変換（NotebookLM用）")
    print(f"{'='*60}\n")

    # プロセッサー初期化
    try:
        processor = GeminiPowerPointProcessor(api_key=api_key)
    except Exception as e:
        print(f"ERROR: {e}")
        return

    # PowerPoint処理
    pptx_file = Path(pptx_path)
    print(f"📄 Processing: {pptx_file.name}")

    result = processor.process_powerpoint(str(pptx_file))

    if 'error' in result:
        print(f"❌ ERROR: {result['error']}")
        return

    # JSON保存（オプション）
    json_path = pptx_file.with_suffix('.json')
    with open(json_path, 'w', encoding='utf-8') as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    print(f"✅ JSON保存: {json_path.name}")

    # Markdown生成
    md_path = pptx_file.with_suffix('.md')
    markdown_text = generate_markdown_from_json(result, str(md_path))

    # 結果表示
    print(f"\n{'='*60}")
    print(f"変換完了")
    print(f"{'='*60}")
    print(f"📄 元ファイル: {pptx_file.name}")
    print(f"📊 JSON: {json_path.name}")
    print(f"📝 Markdown: {md_path.name}")
    print(f"🎯 信頼度スコア: {result['gemini_analysis'].get('confidence_score', 0)}%")
    print(f"\n💡 NotebookLMへのアップロード方法:")
    print(f"   1. https://notebooklm.google.com/ にアクセス")
    print(f"   2. 新しいノートブックを作成")
    print(f"   3. '{md_path.name}' をアップロード")
    print(f"{'='*60}\n")


def main():
    """メイン処理"""
    import sys

    # APIキー取得
    api_key = os.environ.get('GEMINI_API_KEY')
    if not api_key:
        print("\nGemini API key not found in environment variable.")
        api_key = input("Enter your Gemini API key: ").strip()
        if not api_key:
            print("ERROR: API key is required")
            return

    # ファイルパス取得
    if len(sys.argv) > 1:
        pptx_path = sys.argv[1]
    else:
        pptx_path = input("\nPowerPointファイルのパス: ").strip()

    if not Path(pptx_path).exists():
        print(f"ERROR: File not found: {pptx_path}")
        return

    # 処理実行
    process_powerpoint_to_markdown(pptx_path, api_key)


if __name__ == "__main__":
    main()
